package libdwarf;
import com.ochafik.lang.jnaerator.runtime.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * Used for signatures where ever they appear.<br>
 * It is not a string, it<br>
 * is 8 bytes of a signature one would use to find<br>
 * a type unit. See dwarf_formsig8()<br>
 * Sometimes it is used in calculations as<br>
 * Dwarf_Unsigned, but that is done inside libdwarf<br>
 * and the endianness question makes it a bit sketchy.<br>
 * <i>native declaration : line 122</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class Dwarf_Sig8_s extends Structure<Dwarf_Sig8_s, Dwarf_Sig8_s.ByValue, Dwarf_Sig8_s.ByReference > {
	/** C type : char[8] */
	public byte[] signature = new byte[8];
	public Dwarf_Sig8_s() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("signature");
	}
	/** @param signature C type : char[8] */
	public Dwarf_Sig8_s(byte signature[]) {
		super();
		if ((signature.length != this.signature.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.signature = signature;
	}
	protected ByReference newByReference() { return new ByReference(); }
	protected ByValue newByValue() { return new ByValue(); }
	protected Dwarf_Sig8_s newInstance() { return new Dwarf_Sig8_s(); }
	public static Dwarf_Sig8_s[] newArray(int arrayLength) {
		return Structure.newArray(Dwarf_Sig8_s.class, arrayLength);
	}
	public static class ByReference extends Dwarf_Sig8_s implements Structure.ByReference {
		
	};
	public static class ByValue extends Dwarf_Sig8_s implements Structure.ByValue {
		
	};
}
