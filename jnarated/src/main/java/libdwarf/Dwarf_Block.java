package libdwarf;
import com.ochafik.lang.jnaerator.runtime.Structure;
import com.sun.jna.Pointer;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class Dwarf_Block extends Structure<Dwarf_Block, Dwarf_Block.ByValue, Dwarf_Block.ByReference > {
	/**
	 * length of block bl_data points at<br>
	 * C type : Dwarf_Unsigned
	 */
	public long bl_len;
	/**
	 * uninterpreted data<br>
	 * C type : Dwarf_Ptr
	 */
	public Pointer bl_data;
	/**
	 * See libdwarf.h DW_LKIND*<br>
	 * C type : Dwarf_Small
	 */
	public byte bl_from_loclist;
	/**
	 * Section (not CU) offset which 'data' comes from.<br>
	 * C type : Dwarf_Unsigned
	 */
	public long bl_section_offset;
	public Dwarf_Block() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("bl_len", "bl_data", "bl_from_loclist", "bl_section_offset");
	}
	/**
	 * @param bl_len length of block bl_data points at<br>
	 * C type : Dwarf_Unsigned<br>
	 * @param bl_data uninterpreted data<br>
	 * C type : Dwarf_Ptr<br>
	 * @param bl_from_loclist See libdwarf.h DW_LKIND*<br>
	 * C type : Dwarf_Small<br>
	 * @param bl_section_offset Section (not CU) offset which 'data' comes from.<br>
	 * C type : Dwarf_Unsigned
	 */
	public Dwarf_Block(long bl_len, Pointer bl_data, byte bl_from_loclist, long bl_section_offset) {
		super();
		this.bl_len = bl_len;
		this.bl_data = bl_data;
		this.bl_from_loclist = bl_from_loclist;
		this.bl_section_offset = bl_section_offset;
	}
	protected ByReference newByReference() { return new ByReference(); }
	protected ByValue newByValue() { return new ByValue(); }
	protected Dwarf_Block newInstance() { return new Dwarf_Block(); }
	public static Dwarf_Block[] newArray(int arrayLength) {
		return Structure.newArray(Dwarf_Block.class, arrayLength);
	}
	public static class ByReference extends Dwarf_Block implements Structure.ByReference {
		
	};
	public static class ByValue extends Dwarf_Block implements Structure.ByValue {
		
	};
}
