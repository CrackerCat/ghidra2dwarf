package libdwarf;
import com.ochafik.lang.jnaerator.runtime.Structure;
import com.sun.jna.Pointer;
import java.util.Arrays;
import java.util.List;
/**
 * Used in the get_section interface function<br>
 * in Dwarf_Obj_Access_Section_s.  Since libdwarf<br>
 * depends on standard DWARF section names an object<br>
 * format that has no such names (but has some<br>
 * method of setting up 'sections equivalents')<br>
 * must arrange to return standard DWARF section<br>
 * names in the 'name' field.  libdwarf does<br>
 * not free the strings in 'name'.<br>
 * <i>native declaration : line 621</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class Dwarf_Obj_Access_Section_s extends Structure<Dwarf_Obj_Access_Section_s, Dwarf_Obj_Access_Section_s.ByValue, Dwarf_Obj_Access_Section_s.ByReference > {
	/**
	 * addr is the virtual address of the first byte of<br>
	 * the section data.  Usually zero when the address<br>
	 * makes no sense for a given section.<br>
	 * C type : Dwarf_Addr
	 */
	public long addr;
	/**
	 * Section type.<br>
	 * C type : Dwarf_Unsigned
	 */
	public long type;
	/**
	 * Size in bytes of the section.<br>
	 * C type : Dwarf_Unsigned
	 */
	public long size;
	/**
	 * Having an accurate section name makes debugging of libdwarf easier.<br>
	 * and is essential to find the .debug_ sections.<br>
	 * C type : const char*
	 */
	public Pointer name;
	/**
	 * Set link to zero if it is meaningless.  If non-zero<br>
	 * it should be a link to a rela section or from symtab<br>
	 * to strtab.  In Elf it is sh_link.<br>
	 * C type : Dwarf_Unsigned
	 */
	public long link;
	/**
	 * The section header index of the section to which the<br>
	 * relocation applies. In Elf it is sh_info.<br>
	 * C type : Dwarf_Unsigned
	 */
	public long info;
	/**
	 * Elf sections that are tables have a non-zero entrysize so<br>
	 * the count of entries can be calculated even without<br>
	 * the right structure definition. If your object format<br>
	 * does not have this data leave this zero.<br>
	 * C type : Dwarf_Unsigned
	 */
	public long entrysize;
	public Dwarf_Obj_Access_Section_s() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("addr", "type", "size", "name", "link", "info", "entrysize");
	}
	/**
	 * @param addr addr is the virtual address of the first byte of<br>
	 * the section data.  Usually zero when the address<br>
	 * makes no sense for a given section.<br>
	 * C type : Dwarf_Addr<br>
	 * @param type Section type.<br>
	 * C type : Dwarf_Unsigned<br>
	 * @param size Size in bytes of the section.<br>
	 * C type : Dwarf_Unsigned<br>
	 * @param name Having an accurate section name makes debugging of libdwarf easier.<br>
	 * and is essential to find the .debug_ sections.<br>
	 * C type : const char*<br>
	 * @param link Set link to zero if it is meaningless.  If non-zero<br>
	 * it should be a link to a rela section or from symtab<br>
	 * to strtab.  In Elf it is sh_link.<br>
	 * C type : Dwarf_Unsigned<br>
	 * @param info The section header index of the section to which the<br>
	 * relocation applies. In Elf it is sh_info.<br>
	 * C type : Dwarf_Unsigned<br>
	 * @param entrysize Elf sections that are tables have a non-zero entrysize so<br>
	 * the count of entries can be calculated even without<br>
	 * the right structure definition. If your object format<br>
	 * does not have this data leave this zero.<br>
	 * C type : Dwarf_Unsigned
	 */
	public Dwarf_Obj_Access_Section_s(long addr, long type, long size, Pointer name, long link, long info, long entrysize) {
		super();
		this.addr = addr;
		this.type = type;
		this.size = size;
		this.name = name;
		this.link = link;
		this.info = info;
		this.entrysize = entrysize;
	}
	protected ByReference newByReference() { return new ByReference(); }
	protected ByValue newByValue() { return new ByValue(); }
	protected Dwarf_Obj_Access_Section_s newInstance() { return new Dwarf_Obj_Access_Section_s(); }
	public static Dwarf_Obj_Access_Section_s[] newArray(int arrayLength) {
		return Structure.newArray(Dwarf_Obj_Access_Section_s.class, arrayLength);
	}
	public static class ByReference extends Dwarf_Obj_Access_Section_s implements Structure.ByReference {
		
	};
	public static class ByValue extends Dwarf_Obj_Access_Section_s implements Structure.ByValue {
		
	};
}
