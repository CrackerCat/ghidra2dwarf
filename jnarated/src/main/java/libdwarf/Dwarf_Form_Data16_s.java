package libdwarf;
import com.ochafik.lang.jnaerator.runtime.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class Dwarf_Form_Data16_s extends Structure<Dwarf_Form_Data16_s, Dwarf_Form_Data16_s.ByValue, Dwarf_Form_Data16_s.ByReference > {
	/** C type : unsigned char[16] */
	public byte[] fd_data = new byte[16];
	public Dwarf_Form_Data16_s() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("fd_data");
	}
	/** @param fd_data C type : unsigned char[16] */
	public Dwarf_Form_Data16_s(byte fd_data[]) {
		super();
		if ((fd_data.length != this.fd_data.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.fd_data = fd_data;
	}
	protected ByReference newByReference() { return new ByReference(); }
	protected ByValue newByValue() { return new ByValue(); }
	protected Dwarf_Form_Data16_s newInstance() { return new Dwarf_Form_Data16_s(); }
	public static Dwarf_Form_Data16_s[] newArray(int arrayLength) {
		return Structure.newArray(Dwarf_Form_Data16_s.class, arrayLength);
	}
	public static class ByReference extends Dwarf_Form_Data16_s implements Structure.ByReference {
		
	};
	public static class ByValue extends Dwarf_Form_Data16_s implements Structure.ByValue {
		
	};
}
