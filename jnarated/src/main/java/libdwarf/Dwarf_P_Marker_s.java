package libdwarf;
import com.ochafik.lang.jnaerator.runtime.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : line 520</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class Dwarf_P_Marker_s extends Structure<Dwarf_P_Marker_s, Dwarf_P_Marker_s.ByValue, Dwarf_P_Marker_s.ByReference > {
	/** C type : Dwarf_Unsigned */
	public long ma_marker;
	/** C type : Dwarf_Unsigned */
	public long ma_offset;
	public Dwarf_P_Marker_s() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("ma_marker", "ma_offset");
	}
	/**
	 * @param ma_marker C type : Dwarf_Unsigned<br>
	 * @param ma_offset C type : Dwarf_Unsigned
	 */
	public Dwarf_P_Marker_s(long ma_marker, long ma_offset) {
		super();
		this.ma_marker = ma_marker;
		this.ma_offset = ma_offset;
	}
	protected ByReference newByReference() { return new ByReference(); }
	protected ByValue newByValue() { return new ByValue(); }
	protected Dwarf_P_Marker_s newInstance() { return new Dwarf_P_Marker_s(); }
	public static Dwarf_P_Marker_s[] newArray(int arrayLength) {
		return Structure.newArray(Dwarf_P_Marker_s.class, arrayLength);
	}
	public static class ByReference extends Dwarf_P_Marker_s implements Structure.ByReference {
		
	};
	public static class ByValue extends Dwarf_P_Marker_s implements Structure.ByValue {
		
	};
}
