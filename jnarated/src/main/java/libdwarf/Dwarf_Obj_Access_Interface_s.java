package libdwarf;
import com.ochafik.lang.jnaerator.runtime.Structure;
import com.sun.jna.Pointer;
import java.util.Arrays;
import java.util.List;
/**
 * These structures are allocated and deallocated by your code<br>
 * when you are using the libdwarf Object File Interface<br>
 * [dwarf_object_init and dwarf_object_finish)] directly.<br>
 * dwarf_object_finish) does not free<br>
 * struct Dwarf_Obj_Access_Interface_s or its content.<br>
 * (libdwarf does record a pointer to this struct: you must<br>
 * ensure that pointer remains valid for as long as<br>
 * a libdwarf instance is open (meaning<br>
 * after dwarf_init) and before dwarf_finish)).<br>
 * If you are reading Elf objects and libelf use dwarf_init()<br>
 * or dwarf_elf_init() which take care of these details.<br>
 * <i>native declaration : line 796</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class Dwarf_Obj_Access_Interface_s extends Structure<Dwarf_Obj_Access_Interface_s, Dwarf_Obj_Access_Interface_s.ByValue, Dwarf_Obj_Access_Interface_s.ByReference > {
	/**
	 * object is a void* as it hides the data the object access routines<br>
	 * need (which varies by library in use and object format).<br>
	 * C type : void*
	 */
	public Pointer object;
	/** C type : const Dwarf_Obj_Access_Methods* */
	public libdwarf.Dwarf_Obj_Access_Methods_s.ByReference methods;
	public Dwarf_Obj_Access_Interface_s() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("object", "methods");
	}
	/**
	 * @param object object is a void* as it hides the data the object access routines<br>
	 * need (which varies by library in use and object format).<br>
	 * C type : void*<br>
	 * @param methods C type : const Dwarf_Obj_Access_Methods*
	 */
	public Dwarf_Obj_Access_Interface_s(Pointer object, libdwarf.Dwarf_Obj_Access_Methods_s.ByReference methods) {
		super();
		this.object = object;
		this.methods = methods;
	}
	protected ByReference newByReference() { return new ByReference(); }
	protected ByValue newByValue() { return new ByValue(); }
	protected Dwarf_Obj_Access_Interface_s newInstance() { return new Dwarf_Obj_Access_Interface_s(); }
	public static Dwarf_Obj_Access_Interface_s[] newArray(int arrayLength) {
		return Structure.newArray(Dwarf_Obj_Access_Interface_s.class, arrayLength);
	}
	public static class ByReference extends Dwarf_Obj_Access_Interface_s implements Structure.ByReference {
		
	};
	public static class ByValue extends Dwarf_Obj_Access_Interface_s implements Structure.ByValue {
		
	};
}
