package libdwarf;
import com.ochafik.lang.jnaerator.runtime.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class Dwarf_Regtable_s extends Structure<Dwarf_Regtable_s, Dwarf_Regtable_s.ByValue, Dwarf_Regtable_s.ByReference > {
	/** C type : Dwarf_Regtable_Entry_s[66] */
	public Dwarf_Regtable_Entry_s[] rules = new Dwarf_Regtable_Entry_s[66];
	public Dwarf_Regtable_s() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("rules");
	}
	/** @param rules C type : Dwarf_Regtable_Entry_s[66] */
	public Dwarf_Regtable_s(Dwarf_Regtable_Entry_s rules[]) {
		super();
		if ((rules.length != this.rules.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.rules = rules;
	}
	protected ByReference newByReference() { return new ByReference(); }
	protected ByValue newByValue() { return new ByValue(); }
	protected Dwarf_Regtable_s newInstance() { return new Dwarf_Regtable_s(); }
	public static Dwarf_Regtable_s[] newArray(int arrayLength) {
		return Structure.newArray(Dwarf_Regtable_s.class, arrayLength);
	}
	public static class ByReference extends Dwarf_Regtable_s implements Structure.ByReference {
		
	};
	public static class ByValue extends Dwarf_Regtable_s implements Structure.ByValue {
		
	};
}
