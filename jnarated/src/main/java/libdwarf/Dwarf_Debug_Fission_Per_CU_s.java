package libdwarf;
import com.ochafik.lang.jnaerator.runtime.Structure;
import com.sun.jna.Pointer;
import java.util.Arrays;
import java.util.List;
/**
 * User must allocate this struct, zero it,<br>
 * and pass a pointer to it<br>
 * into dwarf_get_debugfission_for_cu .<br>
 * <i>native declaration : line 3645</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class Dwarf_Debug_Fission_Per_CU_s extends Structure<Dwarf_Debug_Fission_Per_CU_s, Dwarf_Debug_Fission_Per_CU_s.ByValue, Dwarf_Debug_Fission_Per_CU_s.ByReference > {
	/**
	 * If this is not set (ie, not a CU/TU in  DWP Package File)<br>
	 * then pcu_type will be NULL.<br>
	 * C type : const char*
	 */
	public Pointer pcu_type;
	/**
	 * pcu_index is the index (range 1 to N )<br>
	 * into the tu/cu table of offsets and the table<br>
	 * of sizes.  1 to N as the zero index is reserved<br>
	 * for special purposes.  Not a value one<br>
	 * actually needs.<br>
	 * C type : Dwarf_Unsigned
	 */
	public long pcu_index;
	/**
	 * 8 byte<br>
	 * C type : Dwarf_Sig8
	 */
	public Dwarf_Sig8_s pcu_hash;
	/**
	 * [0] has offset and size 0.<br>
	 * [1]-[8] are DW_SECT_* indexes and the<br>
	 * values are  the offset and size<br>
	 * of the respective section contribution<br>
	 * of a single .dwo object. When pcu_size[n] is<br>
	 * zero the corresponding section is not present.<br>
	 * C type : Dwarf_Unsigned[12]
	 */
	public long[] pcu_offset = new long[12];
	/** C type : Dwarf_Unsigned[12] */
	public long[] pcu_size = new long[12];
	/** C type : Dwarf_Unsigned */
	public long unused1;
	/** C type : Dwarf_Unsigned */
	public long unused2;
	public Dwarf_Debug_Fission_Per_CU_s() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("pcu_type", "pcu_index", "pcu_hash", "pcu_offset", "pcu_size", "unused1", "unused2");
	}
	/**
	 * @param pcu_type If this is not set (ie, not a CU/TU in  DWP Package File)<br>
	 * then pcu_type will be NULL.<br>
	 * C type : const char*<br>
	 * @param pcu_index pcu_index is the index (range 1 to N )<br>
	 * into the tu/cu table of offsets and the table<br>
	 * of sizes.  1 to N as the zero index is reserved<br>
	 * for special purposes.  Not a value one<br>
	 * actually needs.<br>
	 * C type : Dwarf_Unsigned<br>
	 * @param pcu_hash 8 byte<br>
	 * C type : Dwarf_Sig8<br>
	 * @param pcu_offset [0] has offset and size 0.<br>
	 * [1]-[8] are DW_SECT_* indexes and the<br>
	 * values are  the offset and size<br>
	 * of the respective section contribution<br>
	 * of a single .dwo object. When pcu_size[n] is<br>
	 * zero the corresponding section is not present.<br>
	 * C type : Dwarf_Unsigned[12]<br>
	 * @param pcu_size C type : Dwarf_Unsigned[12]<br>
	 * @param unused1 C type : Dwarf_Unsigned<br>
	 * @param unused2 C type : Dwarf_Unsigned
	 */
	public Dwarf_Debug_Fission_Per_CU_s(Pointer pcu_type, long pcu_index, Dwarf_Sig8_s pcu_hash, long pcu_offset[], long pcu_size[], long unused1, long unused2) {
		super();
		this.pcu_type = pcu_type;
		this.pcu_index = pcu_index;
		this.pcu_hash = pcu_hash;
		if ((pcu_offset.length != this.pcu_offset.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.pcu_offset = pcu_offset;
		if ((pcu_size.length != this.pcu_size.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.pcu_size = pcu_size;
		this.unused1 = unused1;
		this.unused2 = unused2;
	}
	protected ByReference newByReference() { return new ByReference(); }
	protected ByValue newByValue() { return new ByValue(); }
	protected Dwarf_Debug_Fission_Per_CU_s newInstance() { return new Dwarf_Debug_Fission_Per_CU_s(); }
	public static Dwarf_Debug_Fission_Per_CU_s[] newArray(int arrayLength) {
		return Structure.newArray(Dwarf_Debug_Fission_Per_CU_s.class, arrayLength);
	}
	public static class ByReference extends Dwarf_Debug_Fission_Per_CU_s implements Structure.ByReference {
		
	};
	public static class ByValue extends Dwarf_Debug_Fission_Per_CU_s implements Structure.ByValue {
		
	};
}
